#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple script to create and compile Korean translation file
"""
import os
import subprocess
import shutil
import sys

def main():
    print("Starting Korean translation compilation with Python...")
    
    # Define paths
    temp_dir = r"C:\Temp"
    temp_po_file = os.path.join(temp_dir, "django_ko.po")
    mo_file = r"C:\Users\Hp\Desktop\단가행\Stock Chart Web\locale\ko\LC_MESSAGES\django.mo"
    msgfmt_path = r"C:\Program Files\gettext-iconv\bin\msgfmt.exe"
    
    # Ensure temp directory exists
    os.makedirs(temp_dir, exist_ok=True)
    
    # Create clean PO file content
    po_content = """# Korean translations for Stock Chart Web
# Generated by Django

msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\\n"
"Language: ko\\n"
"Project-Id-Version: Stock Chart Web\\n"
"Report-Msgid-Bugs-To: \\n"
"POT-Creation-Date: 2025-08-30 11:30+0000\\n"
"PO-Revision-Date: 2025-08-30 11:30+0000\\n"
"Last-Translator: Auto Generated\\n"
"Language-Team: Korean\\n"
"MIME-Version: 1.0\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=1; plural=0;\\n"

msgid "Stock Chart Web - Predict & Profit"
msgstr "주식 차트 웹 - 예측하고 수익을"

msgid "Home"
msgstr "홈"

msgid "Chart Board"
msgstr "차트 보드"

msgid "My Predictions"
msgstr "내 예측"

msgid "Charts"
msgstr "차트"

msgid "Predictions"
msgstr "예측"

msgid "Rankings"
msgstr "순위"

msgid "Contests"
msgstr "경연"

msgid "Login"
msgstr "로그인"

msgid "Register"
msgstr "회원가입"

msgid "Logout"
msgstr "로그아웃"

msgid "Predict Stock Prices with AI"
msgstr "AI로 주식 가격 예측"

msgid "Join thousands of traders making accurate predictions and earning rewards in our AI-powered trading platform."
msgstr "AI 기반 거래 플랫폼에서 정확한 예측을 하고 보상을 받는 수천 명의 거래자와 함께하세요."

msgid "Get Started Free"
msgstr "무료로 시작하기"

msgid "Sign In"
msgstr "로그인"

msgid "Real-time Market Analysis"
msgstr "실시간 시장 분석"

msgid "Professional-grade charts and AI insights"
msgstr "전문가급 차트와 AI 인사이트"

msgid "Start Trading"
msgstr "거래 시작"

msgid "My Profile"
msgstr "내 프로필"
"""
    
    # Write PO file with proper UTF-8 encoding
    try:
        with open(temp_po_file, 'w', encoding='utf-8', newline='\n') as f:
            f.write(po_content)
        print(f"Created PO file: {temp_po_file}")
        
        # Check file size
        file_size = os.path.getsize(temp_po_file)
        print(f"File size: {file_size} bytes")
        
        # Create output directory if needed
        mo_dir = os.path.dirname(mo_file)
        os.makedirs(mo_dir, exist_ok=True)
        
        # Run msgfmt to compile - first to temp location then copy
        temp_mo_file = os.path.join(temp_dir, "django_ko.mo")
        print(f"Compiling with msgfmt...")
        result = subprocess.run(
            [msgfmt_path, "-o", temp_mo_file, temp_po_file],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("✓ Success! Korean translation compiled successfully.")
            
            # Copy the MO file to the final location
            try:
                shutil.copy2(temp_mo_file, mo_file)
                if os.path.exists(mo_file):
                    mo_size = os.path.getsize(mo_file)
                    print(f"MO file created: {mo_file} ({mo_size} bytes)")
                
                # Clean up temp MO file
                if os.path.exists(temp_mo_file):
                    os.remove(temp_mo_file)
                    
            except Exception as copy_error:
                print(f"Error copying MO file: {copy_error}")
        else:
            print(f"✗ Error! Failed to compile translation.")
            print(f"Return code: {result.returncode}")
            if result.stdout:
                print(f"STDOUT: {result.stdout}")
            if result.stderr:
                print(f"STDERR: {result.stderr}")
        
        # Clean up
        if os.path.exists(temp_po_file):
            os.remove(temp_po_file)
            print("Temporary file removed.")
            
    except Exception as e:
        print(f"Error: {e}")
    
    print("Done!")

if __name__ == "__main__":
    main()
