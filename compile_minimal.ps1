# Simple Korean translation compiler script with BOM removal
# This script creates a clean PO file, ensures it has the right encoding, and compiles it to MO

# Add gettext tools to PATH
$env:Path += ";C:\Program Files\gettext-iconv\bin"

Write-Host "Starting Korean translation compilation..."

# Define paths
$tempDir = "C:\Temp"
$tempPoFile = "$tempDir\django_ko.po"
$moFile = "C:\Users\Hp\Desktop\단가행\Stock Chart Web\locale\ko\LC_MESSAGES\django.mo"

# Ensure temp directory exists
if (-not (Test-Path $tempDir)) {
    New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
}

# Create minimal PO file content - just enough to test compilation
@"
# Korean translations for Stock Chart Web
# Generated by Django

msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ko\n"
"Project-Id-Version: Stock Chart Web\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-30 11:30+0000\n"
"PO-Revision-Date: 2025-08-30 11:30+0000\n"
"Last-Translator: Auto Generated\n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Home"
msgstr "홈"

msgid "Chart"
msgstr "차트"
"@ | Out-File -FilePath $tempPoFile -Encoding utf8NoBOM

Write-Host "Created clean translation file at: $tempPoFile"
Write-Host "File encoding: UTF-8 without BOM"

# Check that the file exists and show first few lines
if (Test-Path $tempPoFile) {
    Write-Host "File content preview:"
    Get-Content -Path $tempPoFile -TotalCount 5
}

# Create directory for the MO file if needed
$moDir = Split-Path -Parent $moFile
if (-not (Test-Path $moDir)) {
    New-Item -ItemType Directory -Path $moDir -Force | Out-Null
    Write-Host "Created output directory: $moDir"
}

# Run msgfmt to compile
Write-Host "Compiling to MO file at: $moFile"
& msgfmt -o $moFile $tempPoFile

# Check result
if ($LASTEXITCODE -eq 0) {
    Write-Host "Success! Korean translation compiled successfully." -ForegroundColor Green
} else {
    Write-Host "Error! Failed to compile translation (Exit code: $LASTEXITCODE)" -ForegroundColor Red
    
    # Try to debug what went wrong
    Write-Host "Running msgfmt in verbose mode for debugging:"
    & msgfmt --verbose -o $moFile $tempPoFile
}

# Clean up
if (Test-Path $tempPoFile) {
    Remove-Item -Path $tempPoFile -Force
    Write-Host "Temporary files cleaned up."
}

Write-Host "Done!"
